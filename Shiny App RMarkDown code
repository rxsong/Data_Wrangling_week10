---
title: "Song_week10"
author: "Ruixuan Song"
date: "4/22/2018"
output: html_document
---

# Load Required Packages
```{r}
library(shiny)
library(tidyverse)
library(tidycensus)

```

# import AVS data API 
```{r}
## Since the API server is down, we do not have an actual API key here, will add it back ASAP once the server turns back on for testing the Shiny App.
source("api-keys.R")
census_api_key(api.key.census)
```


```{r}
UI_main <- fluidPage(
    titlePanel("Shiny App for AVS data"),
    sidebarLayout(
        sidebarPanel(
        selectInput("State", "State",choices = state.abb,selected = "NJ"),
        radioButtons("Type", "Type",choices = list("median_gross_rent",
                                                  "median_household_income",
                                                  "ratio"), selected = "ratio")),
    mainPanel(plotOutput("Plot"))
  )
)
# main server part that used to plot the AVS plot 
main <- function(input, output) {
  reduced_df <- reactive({
        get_acs(
        geography = "tract",
        # A choice of plotting either median household income (B19013_001), median gross rent (B25064_001), or the ratio of median gross rent to median household income
        variables = c(median_gross_rent = "B25064_001" , median_household_income = "B19013_001"),
        state = input$State,
        geometry = TRUE
      ) %>% .[, -5] %>% data.frame() %>% 
      spread(key = variable, value = estimate) %>% 
      mutate(ratio = median_gross_rent / median_household_income)
  })
  # plotting the result
  output$Plot <- renderPlot({
    reduced_df() %>% 
    ggplot(aes_string(fill = input$Type)) + geom_sf() + ggtitle(input$Type) + 
      scale_fill_gradientn(colours = rainbow(7))
  })
  
}

# Check the shiny App and run the result
shinyApp(ui = UI_main, server = main)
```
